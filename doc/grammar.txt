command-line:
	external-declaration
	statement
	
translation-unit:
	external-declaration
	external-declaration translation-unit

external-declaration:
	function-definition
	declaration
	struct-specifier
	union-specifier

function-definition:
	type-specifier identifier ( parameter-listopt ) compound-statement

type-specifier:
	bool
	char
	uchar
	short
	ushort
	int
	uint
	int8
	uint8
	int16
	uint16
	int32
	uint32
	int64
	uint64
	long
	ulong
	float
	double
	str
	vec
	dict
	func
	void
	struct identifier
	union identifier

struct-specifier:
	struct identifier { struct-declaration-listopt } ;

struct-declaration-list:
	struct-declaration
	struct-declaration struct-declaration-list

struct-declaration:
	type-specifier identifier ;

union-specifier:
	union identifier { union-declaration-listopt } ;

union-declaration-list:
	union-declaration
	union-declaration union-declaration-list

union-declaration:
	type-specifier identifier ;

parameter-list:
	parameter-declaration
	parameter-declaration, parameter-list

parameter-declaration:
	type-specifier identifier

compound-statement:
	{ block-item-listopt }

block-item-list:
	block-item
	block-item block-item-list

block-item:
	declaration
	statement

declaration:
	type-specifier init-declarator-list ;

init-declarator-list:
	init-declarator
	init-declarator , init-declarator-list

init-declarator:
	identifier
	identifier = assignment-expression

assignment-expression:
	conditional-expression
	unary-expression assignment-operator assignment-expression

conditional-expression:
	logical-OR-expression
	logical-OR-expression ? expression : conditional-expression

logical-OR-expression:
	logical-AND-expression
	logical-AND-expression || logical-OR-expression

logical-AND-expression:
	inclusive-OR-expression
	inclusive-OR-expression && logical-AND-expression

inclusive-OR-expression:
	exclusive-OR-expression
	exclusive-OR-expression | inclusive-OR-expression

exclusive-OR-expression:
	AND-expression
	AND-expression ˆ exclusive-OR-expression

AND-expression:
	equality-expression
	equality-expression & AND-expression

equality-expression:
	relational-expression
	relational-expression == equality-expression
	relational-expression != equality-expression

relational-expression:
	shift-expression
	shift-expression < relational-expression
	shift-expression > relational-expression
	shift-expression <= relational-expression
	shift-expression >= relational-expression

shift-expression:
	additive-expression
	additive-expression << shift-expression
	additive-expression >> shift-expression

additive-expression:
	multiplicative-expression
	multiplicative-expression + additive-expression
	multiplicative-expression - additive-expression

multiplicative-expression:
	cast-expression
	cast-expression * multiplicative-expression
	cast-expression / multiplicative-expression
	cast-expression % multiplicative-expression

cast-expression:
	unary-expression
	( type-specifier ) cast-expression

unary-expression:
	postfix-expression
	++ unary-expression
	-- unary-expression
	unary-operator cast-expression

unary-operator: one of
	+
	-
	˜
	!

postfix-expression:
	primary-expression
	primary-expression expression-postfix-list

primary-expression:
	identifier
	constant
	string-literal
	( expression )

constant:
	integer-constant
	floating-constant
	character-constant
	null

expression:
	assignment-expression
	assignment-expression , expression

expression-postfix-list:
	expression-postfix expression-postfix-list

expression-postfix:
	. identifier
	[ expression ]
	( argument-expression-listopt )
	++
	--

argument-expression-list:
	assignment-expression
	assignment-expression , argument-expression-list

assignment-operator:
	=
	*=
	/=
	%=
	+=
	-=
	<<=
	>>=
	&=
	ˆ=
	|=

statement:
	labeled-statement
	compound-statement
	expression-statement
	selection-statement
	iteration-statement
	jump-statement
	try-statement

labeled-statement:
	case conditional-expression : statement
	default : statement

expression-statement:
	expressionopt ;

selection-statement:
	if-statement

iteration-statement:
	while-statement
	do-while-statement
	for-statement

jump-statement:
	continue ;
	break ;
	return expressionopt ;

if-statement:
	if ( expression ) statement
	if ( expression ) statement else statement

switch-statement:
	switch ( expression ) statement

while-statement:
	while ( expression ) statement

do-while-statement:
	do statement while ( expression ) ;

for-statement:
	for ( expressionopt ; expressionopt ; expressionopt ) statement
	for ( declaration expressionopt ; expressionopt ) statement

try-statement:
	try compound-statement
	try compound-statement catch ( exception identifier ) compound-statement
