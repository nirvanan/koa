primary-expression:
	identifier
	constant
	string-literal
	( expression )

postfix-expression:
	primary-expression
	postfix-expression [ expression ]
	postfix-expression ( argument-expression-listopt )
	postfix-expression . identifier
	postfix-expression ++
	postfix-expression --
	( type-name ) { initializer-list }
	( type-name ) { initializer-list , }

argument-expression-list:
	assignment-expression
	argument-expression-list , assignment-expression

unary-expression:
	postfix-expression
	++ unary-expression
	-- unary-expression
	unary-operator cast-expression

unary-operator: one of
	& * + - ˜ !

cast-expression:
	unary-expression
	( type-name ) cast-expression

multiplicative-expression:
	cast-expression
	multiplicative-expression * cast-expression
	multiplicative-expression / cast-expression
	multiplicative-expression % cast-expression

additive-expression:
	multiplicative-expression
	additive-expression + multiplicative-expression
	additive-expression - multiplicative-expression

shift-expression:
	additive-expression
	shift-expression << additive-expression
	shift-expression >> additive-expression

relational-expression:
	shift-expression
	relational-expression < shift-expression
	relational-expression > shift-expression
	relational-expression <= shift-expression
	relational-expression >= shift-expression

equality-expression:
	relational-expression
	equality-expression == relational-expression
	equality-expression != relational-expression

AND-expression:
	equality-expression
	AND-expression & equality-expression

exclusive-OR-expression:
	AND-expression
	exclusive-OR-expression ˆ AND-expression

inclusive-OR-expression:
	exclusive-OR-expression
	inclusive-OR-expression | exclusive-OR-expression

logical-AND-expression:
	inclusive-OR-expression
	logical-AND-expression && inclusive-OR-expression

logical-OR-expression:
	logical-AND-expression
	logical-OR-expression || logical-AND-expression

conditional-expression:
	logical-OR-expression
	logical-OR-expression ? expression : conditional-expression

assignment-expression:
	conditional-expression
	unary-expression assignment-operator assignment-expression

assignment-operator: one of
	= *= /= %= += -= <<= >>= &= ˆ= |=

expression:
	assignment-expression
	expression , assignment-expression

constant-expression:
	conditional-expression

declaration:
	declaration-specifiers init-declarator-listopt ;

declaration-specifiers:
	storage-class-specifier declaration-specifiersopt
	type-specifier

init-declarator-list:
	init-declarator
	init-declarator-list , init-declarator

init-declarator:
	declarator
	declarator = initializer

storage-class-specifier:
	static

type-specifier:
	bool
	char
	int
	long
	float
	double
	str
	vec
	dict

declarator:
	identifier
	( declarator )
	declarator ( parameter-type-list )
	declarator ( identifier-listopt )
	declarator [ assignment-expressionopt ]
	declarator [ static assignment-expression ]
	declarator [ * ]

type-qualifier-list:
	type-qualifier
	type-qualifier-list type-qualifier

parameter-type-list:
	parameter-list

parameter-list:
	parameter-declaration
	parameter-list , parameter-declaration

parameter-declaration:
	declaration-specifiers declarator

identifier-list:
	identifier
	identifier-list , identifier

initializer:
	assignment-expression

statement:
	labeled-statement
	compound-statement
	expression-statement
	selection-statement
	iteration-statement
	jump-statement

labeled-statement:
	case constant-expression : statement
	default : statement

compound-statement:
	{ block-item-listopt }

block-item-list:
	block-item
	block-item-list block-item

block-item:
	declaration
	statement

expression-statement:
	expressionopt ;
	
selection-statement:
	if ( expression ) statement
	if ( expression ) statement else statement
	switch ( expression ) statement

iteration-statement:
	while ( expression ) statement
	do statement while ( expression ) ;
	for ( expressionopt ; expressionopt ; expressionopt ) statement
	for ( declaration expressionopt ; expressionopt ) statement

jump-statement:
	continue ;
	break ;
	return expressionopt ;

translation-unit:
	external-declaration
	translation-unit external-declaration

external-declaration:
	function-definition
	declaration

function-definition:
	declaration-specifiers declarator declaration-listopt compound-statement

declaration-list:
	declaration
	declaration-list declaration
